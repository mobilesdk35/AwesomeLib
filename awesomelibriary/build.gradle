apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 29


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

bintray {
    user = 'mobilesdk'
    key = '8ef388c445a03f1f694487829e6889dc2c991d73'
    publications = ['customPublication']
    configurations = ['archives']
    pkg {
        repo = 'AwesomeLibriary'
        name = ' com.mobile.awesomelib'
        //userOrg = 'com-mobilesdk-test'
        desc = 'Awesome library'
        vcsUrl = 'https://github.com/mobilesdk35/AwesomeLib.git'
        licenses = ['Apache-2.0']
        dryRun = false
        publish = true
        publicDownloadNumbers = true
        version {
            name = '1.0.1'
            desc = '1.0.1'
            released  = new Date()
            //vcsTag = '1.0.1'
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

project.afterEvaluate {
    publishing {
        /*repositories {
            maven {
                // change to point to your repo, e.g. http://my.org/repo
                //println("EMNLOG url, $buildDir/outputs/aar")
                url = "$buildDir/outputs/aar"
                name = 'myRepo'
            }
        }*/

        publications {
            customPublication(MavenPublication) {
                groupId = ' com.mobile.awesomelib'
                artifactId = 'AwesomeLibriary'
                version = '1.0.2'

                artifact bundleDebugAar
                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom.withXml {
                    def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
                    // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            println("EMNLOG, name: $it.name")
                            println("EMNLOG, $buildDir/outputs/aar")
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }

            }
        }


    }
}